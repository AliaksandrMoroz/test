package service;

import entity.Question;

import java.util.*;

import static java.lang.System.*;

public class QuestionService {
    private static List<Question> questions;

    private static int result;

    public static void start() throws InterruptedException {
        initQuestions();
        out.println("Всего вопросов: " + questions.size() + "\n");


        for (Question el : questions) {
            System.out.println(el.getQuestion());

            el.setAnswer(new Scanner(in).nextLine());

            if (el.getAnswer() != null && el.getAnswer().equalsIgnoreCase(el.getCorrectAnswer())) {
                result++;




            }
        }

                out.println("Количество правильных ответов: " + result);
    }


    private static void initQuestions() {
        questions = List.of(
                new Question("Для чего нужен Component Scan?\n" +
                        "\n" +
                        "A : Для сканирования пакетов на наличие компонентов.\n" +
                        "\n" +
                        "B : Для сканирования компонента на зависимость от других компонентов.\n" +
                        "\n" +
                        "C : Для сканирования компонента на предмет валидности.\n" +
                        "\n" +
                        "D : Для снятия метрик по перфомансу компонента.", "A"),
                new Question("Что такое stubbing?\n" +
                        "\n" +
                        "A : Предопределние поведения Мока или Шпиона. \n" +
                        "\n" +
                        "B : Последовательность выполнения тестов\n" +
                        "\n" +
                        "C : Перехват ошибок в тестах\n" +
                        "\n" +
                        "D : Результат выполненых тестов", "A"),
                new Question("Что такое коллизия в HashMap?\n" +
                        "\n" +
                        "A : Когда 2 равных по equals объекта имеют разный hashcode\n" +
                        "\n" +
                        "B : Когда 2 разных по equals объекта имеют один hashcode\n" +
                        "\n" +
                        "C : Когда 2 равных по equals объекта имеют один hashcode\n" +
                        "\n" +
                        "D : Ничего из перечисленного", "B"),
                new Question("Какой уровень изолированности транзакции самый высокий?\n" +
                        "\n" +
                        "A : Read Commited. \n" +
                        "\n" +
                        "B : Read Uncommited.\n" +
                        "\n" +
                        "C : Sequence. \n" +
                        "\n" +
                        "D : Serializable.", "D"),
                new Question("Что из перечисленного невозможно наследовать?\n" +
                        "\n" +
                        "A : Поля\n" +
                        "\n" +
                        "B : Методы\n" +
                        "\n" +
                        "C : Ничего из перечисленного\n" +
                        "\n" +
                        "D : Конструкторы", "D"),
                new Question("Что является монитором при вызове синхронизированного нестатического метода?\n" +
                        "\n" +
                        "A : Текущий объект, this \n" +
                        "\n" +
                        "B : объекта типа Class, соответствующий классу, в котором определен этот метод.\n" +
                        "\n" +
                        "C : Сам метод\n" +
                        "\n" +
                        "D : Другое", "A"),
                new Question("Какой интерфейс в JPA описывает методы для основных операций над Entity\n" +
                        "\n" +
                        "A : EntityManager\n" +
                        "\n" +
                        "B : Session\n" +
                        "\n" +
                        "C : Manager\n" +
                        "\n" +
                        "D : EntitySession", "A"),
                new Question("\"Где должны располагаться статические (css, js, html) ресурсы в Spring MVC приложении?\n" +
                        "\n" +
                        "A : Это настраивоемо \n" +
                        "\n" +
                        "B : В папке lib\n" +
                        "\n" +
                        "C : В папке resources\n" +
                        "\n" +
                        "D : В папке web\"\n", "A"),
                new Question("Как получить путь к каталогу src/test/resources в JUnit?\n" +
                        "\n" +
                        "A : Папка есть, но не используется тестами\n" +
                        "\n" +
                        "B : Вызвать Test.getResourcesPath()\n" +
                        "\n" +
                        "C : У тестов нет папки с ресурсами\n" +
                        "\n" +
                        "D : С помощью ClassLoader", "D"),
                new Question("Что такое нормализация в реляционных базах данных?\n" +
                        "\n" +
                        "A : Миграция на БД Oracle. \n" +
                        "\n" +
                        "B : Удаление редко используемых данных.\n" +
                        "\n" +
                        "C : Удаление любых  данных. \n" +
                        "\n" +
                        "D : Устранение избыточности данных.", "D"),

                new Question("Каким образом с помощью JDBC вызвать хранимую процедуру?\n" +
                        "\n" +
                        "A : PreparedStatement\n" +
                        "\n" +
                        "B : CallableStatement\n" +
                        "\n" +
                        "C : Statement\n" +
                        "\n" +
                        "D : ProcedureStatement", "B"),

                new Question(" Каким образом можно перебрать все пары ключ-значение из Map?\n" +
                        "\n" +
                        "A : Это невозможно\n" +
                        "\n" +
                        "B : Можно использовать метод entrySet(), который вернет множество всех пар\n" +
                        "\n" +
                        "C : Воспользоваться методом map.iterator(), который вернет объект, с помощью которого можно перебрать все пары\n" +
                        "\n" +
                        "D : Использовать рефлексию для доступа к внутренним членам Map", "B"),

                new Question("\"Аннотация, которой необходимо пометить класс, который не используется как самостоятельный Entity-класс, а только как часть других Entity.\n" +
                        "\n" +
                        "A : @Embedded\n" +
                        "\n" +
                        "B : @Embeddable\n" +
                        "\n" +
                        "C : @Entity\n" +
                        "\n" +
                        "D : @Transient\"\n", "B"),

                new Question("\"В чём разница между @Bean и @Component?\n" +
                        "\n" +
                        "A : @B родитель @C\n" +
                        "\n" +
                        "B : @B – механизм создания бина в Java-конфиге, @C – декларация класса, как кандидата для создания бина.\n" +
                        "\n" +
                        "C : @B потомок @C\n" +
                        "\n" +
                        "D : @B и @C полностью взаимозаменяемые\"\n", "B"),

                new Question("\"Какой стратегии наследования Entity нет в JPA.\n" +
                        "\n" +
                        "A : Одна таблица для каждого класса с использованием соединений (JOIN)\n" +
                        "\n" +
                        "B : Одна таблица для каждого класса с объединениями (UNION)\n" +
                        "\n" +
                        "C : Одна таблица для каждого класса (MappedSuperClass)\n" +
                        "\n" +
                        "D : Общая таблица для всей иерархии\"\n", "B"),

                new Question("\"Какая разница между @Before, @BeforeClass?\n" +
                        "\n" +
                        "A : @B вызывается перед каждым тестом, @BC вызывается один раз\n" +
                        "\n" +
                        "B : @BC вызывается перед каждым тестом, @B вызывается один раз\n" +
                        "\n" +
                        "C : @BC не существует\n" +
                        "\n" +
                        "D : @B не существует\"\n", "A"),

                new Question("\"В чем разница между IOC (Inversion of Control) и Application Context?\n" +
                        "\n" +
                        "A : IOC реализация AC\n" +
                        "\n" +
                        "B : AC реализация IOC\n" +
                        "\n" +
                        "C : это одно и тоже\n" +
                        "\n" +
                        "D : Это концептуально разные вещи\"\n", "B"),

                new Question("\"Какой метод позволяет получить Connection из Session\n" +
                        "\n" +
                        "A : session.getConnection()\n" +
                        "\n" +
                        "B : session.connection()  \n" +
                        "\n" +
                        "C : session.initConnection()\n" +
                        "\n" +
                        "D : ни один из перечисленных\"\n", "D"),

                new Question("\"Какой метод переведет состояние потока из Running в Runnable?\n" +
                        "\n" +
                        "A : yield();\n" +
                        "\n" +
                        "B : wait();\n" +
                        "\n" +
                        "C : sleep();\n" +
                        "\n" +
                        "D : notify();\"\n", "B"),

                new Question("\"Что предпочитаете использовать для конфигурации Spring - xml или аннотирование?\n" +
                        "\n" +
                        "A : XML конфигурация невозможна\n" +
                        "\n" +
                        "B : С точки зрения результата – без разницы\n" +
                        "\n" +
                        "C : Аннотирование. Так как этот способ в рантайме быстрее\n" +
                        "\n" +
                        "D : XML. Так как этот способ в рантайме быстрее\"\n", "B"),

                new Question("\"Что такое индекс?\n" +
                        "\n" +
                        "A : Объект базы данных, создаваемый с целью повышения производительности поиска данных\n" +
                        "\n" +
                        "B : SQL команда для создания списка индексируемых полей. \n" +
                        "\n" +
                        "C : Хранимая процедура, по умолчанию создаваямая для каждой схемы с целью оптимизации вставки новых данных. \n" +
                        "\n" +
                        "D : Техническая документация базы данных Oracle.\"\n", "A"),

                new Question("\" Как проверить частную функцию или класс с частными методами, полями или внутренними классами?\n" +
                        "\n" +
                        "A : Нету возможности\n" +
                        "\n" +
                        "B : Reflection API\n" +
                        "\n" +
                        "C : Классы-тесты имеют доступ к private элементам класса\n" +
                        "\n" +
                        "D : С помощью механизма сериализации/десереализации\"\n", "B"),

                new Question("\"Какой метод предназначен для запуска потока?\n" +
                        "\n" +
                        "A : resume()\n" +
                        "\n" +
                        "B : start()\n" +
                        "\n" +
                        "C : run()\n" +
                        "\n" +
                        "D : init()\"\n", "B"),

                new Question("\"Что такое JPA?\n" +
                        "\n" +
                        "A : Фреймворк, предназначенный для решения задач объектно-реляционного отображения (ORM)\n" +
                        "\n" +
                        "B : Спецификация, определяющая объектно-реляционное  отображение Java объектов и описывающая API для сохранения, получения и управления такими объектами.\n" +
                        "\n" +
                        "C : Библиотека, которая используются для организции взаимодействия между приложением и базой данных.\n" +
                        "\n" +
                        "D : API, для поддержки транзакций, входящее в стандарт серверной платформы для языка программирования Java – Jakarta EE\"\n", "B"),

                new Question("\"Как получить имя текущего исполняемого теста в JUnit 4?\n" +
                        "\n" +
                        "A : @невозможно\n" +
                        "\n" +
                        "B : TestName-Rule\n" +
                        "\n" +
                        "C : Вызвать Tests.getCurrentTestName()\n" +
                        "\n" +
                        "D : С помощью @TestName\"\n", "B"),

                new Question("\"Какое назначение метода load() класса Session\n" +
                        "\n" +
                        "A : Возвращает entity из БД по его идентификатору\n" +
                        "\n" +
                        "B : Возвращает прокси вместо реального объекта entity из БД по его идентификатору\n" +
                        "\n" +
                        "C : Загружает все ленивые связи объекта entity по его идентификатору\n" +
                        "\n" +
                        "D : Используется для сохранения entity в БД\"\n", "b"),

                new Question("\"Объект какого класса необходим для создания SessionFactory в Hibernate\n" +
                        "\n" +
                        "A : Session\n" +
                        "\n" +
                        "B : Configuration\n" +
                        "\n" +
                        "C : SessionFactory\n" +
                        "\n" +
                        "D : Transaction\"\n", "b"),

                new Question("\"Для чего используется аннотация @Bean?\n" +
                        "\n" +
                        "A : Используется для создания бина в конфигурационных файлах\n" +
                        "\n" +
                        "B : Используется для регистрации Prototype бина\n" +
                        "\n" +
                        "C : С помощью @B обозначаем класс, как Bean Post Processor\n" +
                        "\n" +
                        "D : Делает видимым компонент для Bean Post Processor-ов\"\n", "A"),

                new Question("\"Есть переменная объявленная как ArrayList<? extends Number> numbers, объект какого типа нельзя присвоить такой переменной?\n" +
                        "\n" +
                        "A : ArraysList<Number>\n" +
                        "\n" +
                        "B : ArrayList<Object>\n" +
                        "\n" +
                        "C : ArraysList<Double>\n" +
                        "\n" +
                        "D : Ничего из перечисленного\"\n", "D"),

                new Question("\"Выберите несуществующий  в реляционных базах данных тип соединений.\n" +
                        "\n" +
                        "A : Inner. \n" +
                        "\n" +
                        "B : Right\n" +
                        "\n" +
                        "C : Left \n" +
                        "\n" +
                        "D : Partial\"\n", "D"),

                new Question("\"В каком виде представлены данные в реляционных базах данных?\n" +
                        "\n" +
                        "A : Таблицы.\n" +
                        "\n" +
                        "B : JSON.\n" +
                        "\n" +
                        "C : XML.\n" +
                        "\n" +
                        "D : Графы.\"\n", "A"),

                new Question("\"Что такое iterator?\n" +
                        "\n" +
                        "A : Объект, позволяющий сравнивать элементы коллекции\n" +
                        "\n" +
                        "B : Объект, позволяющий перебирать элементы коллекции.\n" +
                        "\n" +
                        "C : Особый вид коллекции\n" +
                        "\n" +
                        "D : Объект, который позволяет разделить некоторый набор элементов на несколько частей для параллельной обработки\"\n", "b"),

                new Question("\"Можем ли мы использовать @Component вместо @Service для бизнес логики?\n" +
                        "\n" +
                        "A : Нет\n" +
                        "\n" +
                        "B : Вместе с аннотацией @Bean над классом\n" +
                        "\n" +
                        "C : Да, но скоуп таких бинов будет Prototype\n" +
                        "\n" +
                        "D : Да\"\n", "D"),

                new Question("\"Для чего служат callback методы в JPA? \n" +
                        "\n" +
                        "A : Эти методы используются для управления жизненным циклом entity \n" +
                        "\n" +
                        "B : Эти методы вызываются при наступлении определенных событий в жизненном цикле entity\n" +
                        "\n" +
                        "C : Эти методы вызываются перед удалением entity\n" +
                        "\n" +
                        "D : Эти методы вызываются после сохранения entity\"\n", "B"),

                new Question("\"Есть объект ArrayList<Number> и ссылка на него, объявленная как ArrayList<? extends Number> numbers. Объекты какого типа можно положить в такой список, используя метод numbers.add(...)?\n" +
                        "\n" +
                        "A : Только Number\n" +
                        "\n" +
                        "B : Ничего из перечисленного\n" +
                        "\n" +
                        "C : Любого, наследующегося от Number и сам Number\n" +
                        "\n" +
                        "D : Любого, наследующегося от Number, кроме самого Number\"\n", "C"),

                new Question("\"Как мы можем выбрать подходящий бин при помощи application.properties?\n" +
                        "\n" +
                        "A : Spring сделает это самостоятельно\n" +
                        "\n" +
                        "B : @Resource(name=\"\"${….}\"\")\n" +
                        "\n" +
                        "C : С помощью @Autowired\n" +
                        "\n" +
                        "D : С помощью @Component\"\n", "B"),

                new Question("\"Почему иногда мы используем @ResponseBody, а иногда ResponseEntity?\n" +
                        "\n" +
                        "A : @RE для более кастомного ответа\n" +
                        "\n" +
                        "B : @RB для более кастомного ответа\n" +
                        "\n" +
                        "C : @RE и @RB полностью одинаковы\n" +
                        "\n" +
                        "D : @RE и @RB используются в концептуально разных случаях\"\n", "A"),

                new Question("\"Какой интерфейс в JPA описывает методы для основных операций над Entity\n" +
                        "\n" +
                        "A : EntityManager\n" +
                        "\n" +
                        "B : Session\n" +
                        "\n" +
                        "C : Manager\n" +
                        "\n" +
                        "D : EntitySession\"\n", "A"),

                new Question("\"Для чего нужен оператор UNION?\n" +
                        "\n" +
                        "A : Реплицирует данные отдельно взятой БД.\n" +
                        "\n" +
                        "B : Прикрепляет к таблице новые данные. \n" +
                        "\n" +
                        "C : Используется при объединении строк.\n" +
                        "\n" +
                        "D : Применяется для объединения двух SQL-запросов\"\n", "D"),

                new Question("\"Есть переменная объявленная как ArrayList<? super Number> numbers, что нельзя присвоить такой переменной?\n" +
                        "\n" +
                        "A : ArrayList<Object>\n" +
                        "\n" +
                        "B : ArrayList<Double>\n" +
                        "\n" +
                        "C : ArrayList\n" +
                        "\n" +
                        "D : Ничего из перечисленного\"\n", "B"),

                new Question("\"В чём отличие между @Component и @ComponentScan?\n" +
                        "\n" +
                        "A : @ComponentScan определяет пакеты для сканирования на наличие @Component\n" +
                        "\n" +
                        "B : @ComponentScan родитель @Component\n" +
                        "\n" +
                        "C : @ComponentScan потомок @Component\n" +
                        "\n" +
                        "D : @ComponentScan предоставляет механизмы валидации @Component\"\n", "A"),

                new Question("\"Как запустить тестовые методы в определенном порядке в JUnit4?\n" +
                        "\n" +
                        "A : @FixMethodOrder(…….)\n" +
                        "\n" +
                        "B : @Ascending\n" +
                        "\n" +
                        "C : Тесты буду выполнены в хаотичном порядке\n" +
                        "\n" +
                        "D : @RunWith\"\n", "A"),

                new Question("\"Чем отличается JDBC Statement от PreparedStatement?\n" +
                        "\n" +
                        "A : Statement используется для выполнения хранимых процедур, PreparedStatement используется для выполнения прекомпилированных запросов с параметрами.\n" +
                        "\n" +
                        "B : Statement используется для выполнения простых SQL-запросов к БД, PreparedStatement используется для выполнения прекомпилированных запросов с параметрами.\n" +
                        "\n" +
                        "C : Statement используется для выполнения SQL-запросов к БД, PreparedStatement используется для выполнения хранимых процедур.\n" +
                        "\n" +
                        "D : PreparedStatement используется для выполнения простых SQL-запросов к БД, Statement используется для выполнения прекомпилированных запросов с параметрами.\"\n", "b"),

                new Question("\"Какой метод переводит поток в режим ожидания?\n" +
                        "\n" +
                        "A : sleep();\n" +
                        "\n" +
                        "B : notify();\n" +
                        "\n" +
                        "C : wait();\n" +
                        "\n" +
                        "D : Другое\"\n", "C"),

                new Question("\"Из чего состоит JPA?\n" +
                        "\n" +
                        "A : Только интерфейсы, без реализаций\n" +
                        "\n" +
                        "B : API, Аннотации, JPQL\n" +
                        "\n" +
                        "C : Состоит из интерфейсов и их реализаций\n" +
                        "\n" +
                        "D : JDBC, JPQL, интерфейсы и аннотации\"\n", "B"),

                new Question("\"Как вы утверждаете, что определенное исключение выбрано в тестах JUnit 4?\n" +
                        "\n" +
                        "A : С помощью параметра “expected” в аннотации @Test\n" +
                        "\n" +
                        "B : С помощью аннотаци Expected\n" +
                        "\n" +
                        "C : С помощью Exception Handler-а\n" +
                        "\n" +
                        "D : Это невоможно\"\n", "A"),

                new Question("\"Каким образом можно получить доступ к private переменной класса?\n" +
                        "\n" +
                        "A : Только внутри класса\n" +
                        "\n" +
                        "B : Только внутри класса и с помощью Reflection API\n" +
                        "\n" +
                        "C : К private переменной нельзя получить доступ никаким образом\n" +
                        "\n" +
                        "D : Только внутри класса и классов-наследников и с помощью Reflection API\"\n", "B"),

                new Question("\"Как условно игнорировать тесты в JUnit 4?\n" +
                        "\n" +
                        "A : @ExceptionExpected\n" +
                        "\n" +
                        "B : @SuccessOnFailed\n" +
                        "\n" +
                        "C : невозможно\n" +
                        "\n" +
                        "D : @Ignore\"\n", "D"),

                new Question("\"Как вы добавите Component Scan в Spring Boot?\n" +
                        "\n" +
                        "A : Добавлю зависимость на CS в Maven/Gradle.\n" +
                        "\n" +
                        "B : CS по умолчанию включён.\n" +
                        "\n" +
                        "C : Укажу его в application.properties\n" +
                        "\n" +
                        "D : Буду декларировать CS-ом каждый компонент.\"\n", "b"),

                new Question("\"В чём разница между @Controller и @RestController?\n" +
                        "\n" +
                        "A : @RestController = @Controller + @ResponseBody\n" +
                        "\n" +
                        "B : Ни в чём\n" +
                        "\n" +
                        "C : @RC для REST, а @C для SOAP\n" +
                        "\n" +
                        "D : @C потокобезопасен, а @RC нет\"\n", "A")
        );
    }
}


